{
  "schemaVersion": "2.0.0",
  "id": "c2050adc-4e59-4a67-9f89-f309ef6c2cdf",
  "title": "Check Script For Entities requiring validation",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-4444-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-4444-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {},
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "c185fa7d-f999-42b6-bc2c-bf060d8e3973"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "### CONFIG ###\n\n#ID of template for running validation\nVALIDATION_TEMPLATE_ID = 'd6afbf16-7c75-42e8-8f27-6d318beda6f0'\n\n# Get the entity that this script is validating\nentity = seal.get_validating_entity()\n\nif 'Requires Validation' in entity['fields'] and entity['fields']['Requires Validation']['value'] == True:\n    # Get the chnage set of the entity\n    change_set = seal.get_change_set_for_entity(entity['id'])\n\n    validation_entity_found = False\n    validation_entity = None\n\n    for entity_ref in change_set['entityRefs']:\n        entity = seal.get_entity(ref=entity_ref)\n        template_id = entity['sourceInfo'].get('template', {}).get('id', '')\n        if template_id == VALIDATION_TEMPLATE_ID:\n            validation_entity_found = True\n            validation_entity = entity\n            break\n\n    if validation_entity_found == False:\n        seal.throw_error(f\"Changes made require validation as defined by the creator. Please create an instance of this template id: {VALIDATION_TEMPLATE_ID}, add it to the change set, and run the validation.\")\n\n    # Access the fields of the entity\n    fields = entity.get(\"fields\", {})\n\n    # Get the value of the 'Validation Passed' field\n    # Use .get() with a default of None in case the field doesn't exist\n    validation_passed_field = fields.get(\"Validation Passed\")\n\n    # Check if the field exists and its value is True\n    # Use validation.assertTrue() which will automatically fail the check if the condition is not met\n    validation.assertTrue(\n        validation_passed_field is not None and validation_passed_field.get(\"value\") is True,\n        \"The 'Validation Passed' field must be checked (True).\"\n    )\n\n# If the script reaches here, the check passes\n# No explicit return is needed for a passing check"
    }
  }
}
{
  "schemaVersion": "2.0.0",
  "id": "a10b3ece-166a-4f74-8de8-8de047a8b08c",
  "title": "Historical Comparison",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-4444-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-4444-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {},
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "66a14f85-37ab-434b-84ef-6bfd54f8b4cd"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "import pandas as pd\nimport altair as alt\nfrom datetime import datetime\n\n# --- Configuration ---\n# Field names from your 'Saved search' configuration\nTIME_FIELD = \"Time (h)\"\nVIABILITY_FIELD = \"Viability (%)\"\nBIOREACTOR_ID_FIELD = \"Bioreactor ID\"\nEXPERIMENT_ID_FIELD = \"Experiment ID\"\n\n# Field names from the containing entity\nSAVED_SEARCH_FIELD_NAME = \"Saved search\" # Using field name\nREFERENCE_FIELD_NAME = \"Reference\"       # Using field name\nCHART_TYPE_NAME = \"Chart\" # Assuming a Type named 'Chart' exists with content type 'Chart'\n\n# --- Main Script ---\n# Get the containing entity (the Report Generator Template in this case)\ncontaining_entity = seal.get_containing_entity()\n\n# Extract the saved search query config using the field name\nsaved_search_config = containing_entity[\"fields\"][SAVED_SEARCH_FIELD_NAME][\"value\"]\n\n# Search for entities using the saved search configuration\n# Note: For a template, this will search based on the template's saved search config.\n# When this script runs from an instance, it will search based on the instance's saved search config.\nsearch_results = seal.search_entities(saved_search_config)\n\nif not search_results:\n    print(\"No data found from the 'Saved search' field.\")\n    # If no data, ensure the reference field is cleared to avoid showing old charts\n    seal.update_field_value(REFERENCE_FIELD_NAME, None)\nelse:\n    # Prepare data for plotting\n    plot_data = []\n    for entity in search_results:\n        fields = entity.get(\"fields\", {})\n        time_h = fields.get(TIME_FIELD, {}).get(\"value\")\n        viability_percent = fields.get(VIABILITY_FIELD, {}).get(\"value\")\n        bioreactor_id = fields.get(BIOREACTOR_ID_FIELD, {}).get(\"value\")\n        experiment_id = fields.get(EXPERIMENT_ID_FIELD, {}).get(\"value\")\n\n        # Only add data points if all required fields are present\n        if all(v is not None for v in [time_h, viability_percent, bioreactor_id, experiment_id]):\n            plot_data.append({\n                TIME_FIELD: time_h,\n                VIABILITY_FIELD: viability_percent,\n                \"Experiment-Bioreactor\": f\"{experiment_id} - {bioreactor_id}\"\n            })\n\n    if not plot_data:\n        print(\"No valid data points found for plotting after extraction.\")\n        seal.update_field_value(REFERENCE_FIELD_NAME, None)\n    else:\n        df = pd.DataFrame(plot_data)\n\n        # Create an interactive selection for the legend\n        selection = alt.selection_point(\n            fields=['Experiment-Bioreactor'],\n            bind='legend',\n            on=\"mouseover\",\n            clear=\"mouseout\",\n            name=\"legend_selection\"\n        )\n\n        # Create the base chart\n        base = alt.Chart(df).encode(\n            x=alt.X(TIME_FIELD, type='quantitative', title=TIME_FIELD),\n            y=alt.Y(VIABILITY_FIELD, type='quantitative', title=VIABILITY_FIELD),\n            tooltip=[TIME_FIELD, VIABILITY_FIELD, 'Experiment-Bioreactor']\n        ).add_params(\n            selection\n        ).interactive() # Enable zooming and panning\n\n        # Create the lines, with opacity based on selection\n        lines = base.mark_line(point=True).encode(\n            color=alt.Color('Experiment-Bioreactor', title='Experiment / Bioreactor'),\n            opacity=alt.condition(selection, alt.value(1), alt.value(0.2)) # Highlight on selection\n        )\n\n        # Combine lines and points for better interactivity (optional, can just use lines)\n        points = base.mark_point().encode(\n            color=alt.Color('Experiment-Bioreactor', title='Experiment / Bioreactor'),\n            opacity=alt.condition(selection, alt.value(1), alt.value(0.2))\n        )\n\n        chart = (lines + points).properties(\n            title=\"Viability (%) vs. Time (h) by Experiment-Bioreactor\"\n        )\n\n        # Generate a unique title for the chart entity using a timestamp\n        timestamp = datetime.now().strftime(\"%Y%m%d%H%M%S\")\n        chart_title = f\"Viability Comparison Chart - {timestamp}\"\n\n        # Create the chart entity in Seal\n        chart_id = seal.create_chart(chart, title=chart_title, type_title=CHART_TYPE_NAME)\n        print(f\"Chart entity created with ID: {chart_id}\")\n\n        # Update the 'Reference' field with the new chart's ID\n        # The 'Reference' field is configured to allow only a single reference, so we overwrite.\n        seal.update_field_value(REFERENCE_FIELD_NAME, [{\"id\": chart_id, \"version\": None}])\n        print(f\"Updated '{REFERENCE_FIELD_NAME}' field with chart ID: {chart_id}\")"
    }
  }
}